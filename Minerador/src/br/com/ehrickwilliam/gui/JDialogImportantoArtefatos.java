/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ehrickwilliam.gui;

import br.com.ehrickwilliam.conexao.HibernateConfiguration;
import br.com.ehrickwilliam.daos.DaoCommit;
import br.com.ehrickwilliam.model.Artefato;
import br.com.ehrickwilliam.model.ArtefatoMap;
import br.com.ehrickwilliam.model.Commit;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.diff.RawTextComparator;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.util.io.DisabledOutputStream;

/**
 *
 * @author Erick
 */
public class JDialogImportantoArtefatos extends javax.swing.JDialog {

    /**
     * Creates new form JDialogCadastroClienteFisico
     *
     * @param parent
     * @param modal
     */
    private List<Commit> commits;


    public JDialogImportantoArtefatos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        executar(jButtonExecutar);
        jButtonExecutar.setVisible(false);
        jProgressBar.setIndeterminate(true);
        this.setTitle("Importando Artefatos...");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelstatus = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jButtonExecutar = new javax.swing.JButton();
        jLabelstatus1 = new javax.swing.JLabel();
        jLabelEtapa = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(443, 185));
        setModal(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelstatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelstatus.setText("Processo iniciado!");
        getContentPane().add(jLabelstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));
        getContentPane().add(jProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 380, 20));

        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonExecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, -1, -1));

        jLabelstatus1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelstatus1.setText("Por favor, aguarde...");
        getContentPane().add(jLabelstatus1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));
        getContentPane().add(jLabelEtapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        retornoConsulta();
        this.dispose();
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JLabel jLabelEtapa;
    private javax.swing.JLabel jLabelstatus;
    private javax.swing.JLabel jLabelstatus1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    public void retornoConsulta() {
        List<Artefato> total = new ArrayList();
        try {
            HibernateConfiguration.setBase("minerador");
            FileRepositoryBuilder builder = new FileRepositoryBuilder();
            Repository repository = builder.setGitDir(new File("D:\\Nova pasta\\GitHub\\core\\.git"))
                    .readEnvironment()
                    .findGitDir()
                    .build();
            commits = new DaoCommit().listar("", "id");
            jProgressBar.setIndeterminate(false);
            jProgressBar.setMaximum(commits.size());
            jProgressBar.setStringPainted(true);
            jProgressBar.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            int count = 0;
            for (Commit string : commits) {
                jLabelstatus.setText("COMMIT ID: " + string.getCommit());

                ObjectId revid = repository.resolve(string.getCommit());
                RevWalk revWalk = new RevWalk(repository);
                RevCommit commit = revWalk.parseCommit(revid);
                RevWalk rw = new RevWalk(repository);
                if(commit.getParentCount() > 0){
                RevCommit parent = rw.parseCommit(commit.getParent(0).getId());
                DiffFormatter df = new DiffFormatter(DisabledOutputStream.INSTANCE);
                df.setRepository(repository);
                df.setDiffComparator(RawTextComparator.DEFAULT);
                df.setDetectRenames(true);
                List<DiffEntry> diffs = df.scan(parent.getTree(), commit.getTree());

                for (DiffEntry diff : diffs) {
                    String[] split = diff.getNewPath().split("/");
                    if (split[0] != null && !"".equals(split[0]) && split[0].indexOf(".") == -1) {
                        if (split.length > 1) {
                            jLabelstatus1.setText(diff.getNewPath());
                            //new DaoArtefato().persistir(new Artefato(diff.getNewPath(), ArtefatoMap.verificarComponenteDoArtefato(split[0]), string));
                            count++;
                            total.add(new Artefato(diff.getNewPath(), ArtefatoMap.verificarComponenteDoArtefato(split[0]), string));
                        }
                    }
                }
                }
                jProgressBar.setValue(jProgressBar.getValue() + 1);
                
            }

            JOptionPane.showMessageDialog(this, count);
        } catch (IOException ex) {
            Logger.getLogger(JDialogImportantoArtefatos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void executar(final JButton botao) {
        new Thread() {
            @Override
            public void run() {
                int flag = 0;
                while (flag == 0) {
                    botao.doClick();
                    flag = +1;
                }
            }
        }.start();

    }
}
