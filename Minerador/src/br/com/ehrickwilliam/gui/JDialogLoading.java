/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ehrickwilliam.gui;

import br.com.ehrickwilliam.bibliotecas.Util;
import br.com.ehrickwilliam.conexao.Data;
import br.com.ehrickwilliam.conexao.HibernateConfiguration;
import br.com.ehrickwilliam.daos.DaoComment;
import br.com.ehrickwilliam.daos.DaoCommit;
import br.com.ehrickwilliam.daos.DaoIssues;
import br.com.ehrickwilliam.daos.DaoUsuario;
import br.com.ehrickwilliam.model.Artefato;
import br.com.ehrickwilliam.model.ArtefatoMap;
import br.com.ehrickwilliam.model.Comment;
import br.com.ehrickwilliam.model.Commit;
import br.com.ehrickwilliam.model.Issue;
import br.com.ehrickwilliam.model.Usuario;
import br.com.ehrickwilliam.model.Usuarios;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.diff.RawTextComparator;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.util.io.DisabledOutputStream;

/**
 *
 * @author Erick
 */
public class JDialogLoading extends javax.swing.JDialog {

    /**
     * Creates new form JDialogCadastroClienteFisico
     *
     * @param parent
     * @param modal
     */
    private List<Usuarios> usuarios;
    private final String dataInicial;
    private final String dataFinal;
    private final String componente;
    private final int modo;
    private static int flag = 0;

    public JDialogLoading(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jProgressBar.setStringPainted(true);
        jProgressBar.setIndeterminate(true);
        jProgressBar.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        jButtonExecutar.setVisible(false);

        modo = Integer.parseInt(Data.hash.get("modo").toString());
        dataInicial = Data.hash.get("dataInicial").toString();
        dataFinal = Data.hash.get("dataFinal").toString();
        componente = Data.hash.get("componente").toString();
        executar(jButtonExecutar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelstatus = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jButtonExecutar = new javax.swing.JButton();
        jLabelstatus1 = new javax.swing.JLabel();
        jLabelEtapa = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuParar = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(443, 185));
        setMinimumSize(new java.awt.Dimension(443, 185));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(443, 185));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelstatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelstatus.setText("Processo iniciado!");
        getContentPane().add(jLabelstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));
        getContentPane().add(jProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 380, 20));

        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonExecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, -1, -1));

        jLabelstatus1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelstatus1.setText("Por favor, aguarde...");
        getContentPane().add(jLabelstatus1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));
        getContentPane().add(jLabelEtapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        jMenuBar1.setMinimumSize(new java.awt.Dimension(56, 31));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(396, 31));

        jMenuParar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ehrickwilliam/icon/116.png"))); // NOI18N
        jMenuParar.setText("Parar");
        jMenuParar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuPararMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuParar);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        try {
            retornoConsultaTotal();
        } catch (SQLException ex) {
            Logger.getLogger(JDialogLoading.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jMenuPararMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuPararMouseClicked
            flag = 1;
    }//GEN-LAST:event_jMenuPararMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JLabel jLabelEtapa;
    private javax.swing.JLabel jLabelstatus;
    private javax.swing.JLabel jLabelstatus1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenu jMenuParar;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    public void retornoConsultaTotal() throws SQLException {

        HibernateConfiguration.setBase("minerador");

        List<Usuario> listarUsuarios = new DaoUsuario().listar("", "id");
        List<Issue> listarIssue = new DaoIssues().obterPorComponente(componente, dataInicial, dataFinal);
        List<Comment> listarComment = new ArrayList<>();

        jProgressBar.setIndeterminate(false);
        jProgressBar.setMaximum(listarIssue.size());
        jProgressBar.setValue(0);

        for (Issue issueLista : listarIssue) {

            List<Comment> obterPorIssue = new DaoComment().obterPorIssue(issueLista);
            for (Comment comment : obterPorIssue) {
                listarComment.add(comment);
            }
            jProgressBar.setValue(jProgressBar.getValue() + 1);
        }

        List<Commit> listaCommit = new DaoCommit().obterPorData(dataInicial, dataFinal);

        List<Artefato> retornoConsulta = retornoConsulta(listaCommit);

        usuarios = new ArrayList<>();
        jProgressBar.setMaximum(listarUsuarios.size());
        jProgressBar.setValue(0);
        jLabelEtapa.setText("Etapa de processamento: 2/3");

        if (modo == 0) {
            modoNormal(listarUsuarios, listarIssue, listarComment, retornoConsulta);
        } else {
            modoDecay(listarUsuarios, listarIssue, listarComment, retornoConsulta);
        }

        BigDecimal calculoTotalExperiencia = calculoTotalExperiencia();
        List<Usuarios> calculoExperienciaPorUsuario = calculoExperienciaPorUsuario(calculoTotalExperiencia);
        Data.hash.put("usuarios", calculoExperienciaPorUsuario);

        this.dispose();
        Util.abrirDialogCentralizado(new JDialogResultado(null, rootPaneCheckingEnabled));

    }

    public void modoNormal(List<Usuario> listarUsuarios, List<Issue> listarIssue, List<Comment> listarComment, List<Artefato> retornoConsulta) {

        for (Usuario usuario : listarUsuarios) {
            if (!usuario.getConta().getEmail().equals("libreoffice-bugs@lists.freedesktop.org") && !usuario.getConta().getEmail().equals("LibreOffice@bielefeldundbuss.de")) {
                jLabelstatus.setText("Processando usuario: " + usuario.getConta().getEmail());
                BigDecimal count = new BigDecimal(1);

                for (Issue issue : listarIssue) {
                    if (issue.getSubmittedBy().equals(usuario)) {
                        count = count.add(new BigDecimal(1));
                    }
                }

                for (Comment comment : listarComment) {
                    if (comment.getCommitedBy().equals(usuario)) {
                        count = count.add(new BigDecimal(1));
                    }
                }
           
                List<Commit> commitsTotal = new ArrayList();
                for (Artefato artefatos : retornoConsulta) {

                    if (artefatos.getCommit().getCommiter().equals(usuario) && !commitsTotal.contains(artefatos.getCommit())) {
                        commitsTotal.add(artefatos.getCommit());
                    }
                }
                count = count.add(new BigDecimal(commitsTotal.size()));
               
                usuarios.add(new Usuarios(null, usuario.getConta().getEmail(), count, componente));
                jProgressBar.setValue(jProgressBar.getValue() + 1);
            }
        }
    }

    public void modoDecay(List<Usuario> listarUsuarios, List<Issue> listarIssue, List<Comment> listarComment, List<Artefato> retornoConsulta) {

        for (Usuario usuario : listarUsuarios) {
            if (!usuario.getConta().getEmail().equals("libreoffice-bugs@lists.freedesktop.org") && !usuario.getConta().getEmail().equals("LibreOffice@bielefeldundbuss.de")) {
                jLabelstatus.setText("Processando usuario: " + usuario.getConta().getEmail());
                BigDecimal count = new BigDecimal(0.0);
                Calendar dataT;
                for (Issue issue : listarIssue) {
                    if (!dataInicial.equals("  /  /    ")) {
                        dataT = Util.stringToCalendar(dataInicial);
                    } else {
                        dataT = Util.stringToCalendar("03/08/2010");
                    }
                    if (issue.getSubmittedBy().equals(usuario)) {
                        BigDecimal subtract = new BigDecimal(dataT.getTimeInMillis()).subtract(new BigDecimal(issue.getSubmittedOn().getTimeInMillis()));
                        if(Double.isNaN(1 / subtract.doubleValue()))
                        count = count.add(new BigDecimal(1 / subtract.doubleValue()));
                    }
                }

                for (Comment comment : listarComment) {
                    if (!dataInicial.equals("  /  /    ")) {
                        dataT = Util.stringToCalendar(dataInicial);
                    } else {
                        dataT = Util.stringToCalendar("03/08/2010");
                    }
                    if (comment.getCommitedBy().equals(usuario)) {
                        BigDecimal subtract = new BigDecimal(dataT.getTimeInMillis()).subtract(new BigDecimal(comment.getSubmittedOn().getTimeInMillis()));
                        count = count.add(new BigDecimal(1 / subtract.doubleValue()));
                    }
                }

                List<Commit> commitsTotal = new ArrayList();
                for (Artefato artefatos : retornoConsulta) {

                    if (artefatos.getCommit().getCommiter().equals(usuario) && !commitsTotal.contains(artefatos.getCommit())) {
                        commitsTotal.add(artefatos.getCommit());
                    }
                }

                for (Commit commit : commitsTotal) {
                    if (!dataInicial.equals("  /  /    ")) {
                        dataT = Util.stringToCalendar(dataInicial);
                    } else {
                        dataT = Util.stringToCalendar("03/08/2010");
                    }
                    BigDecimal subtract = new BigDecimal(dataT.getTimeInMillis()).subtract(new BigDecimal(commit.getDate().getTimeInMillis()));
                    
                    if(Double.isNaN(subtract.doubleValue()))
                    count = count.add(new BigDecimal(1/subtract.doubleValue()));
                    
                }

                usuarios.add(new Usuarios(null, usuario.getConta().getEmail(), count, componente));
                jProgressBar.setValue(jProgressBar.getValue() + 1);
            }
        }

    }

    public static void executar(final JButton botao) {
        new Thread() {
            @Override
            public void run() {
               
                while (flag == 0) {
                    try {
                        botao.doClick();
                        flag = +1;

                    } catch (Exception e) {
                        Logger.getLogger(JDialogImportantoArtefatos.class.getName()).log(Level.SEVERE, null, e);
                    }
                }
            }
        }.start();

    }

    public BigDecimal calcularExperiencia(BigDecimal divisor, BigDecimal total) {

        return new BigDecimal(divisor.doubleValue() / total.doubleValue());
    }

    public BigDecimal calculoTotalExperiencia() {

        BigDecimal soma = new BigDecimal(0);
        jProgressBar.setMaximum(usuarios.size());
        jProgressBar.setValue(0);
        jLabelEtapa.setText("Etapa calculo de experiencia: 2/3");
        for (Usuarios usu : usuarios) {
            soma = soma.add(usu.getContribuicao());
            this.setTitle(usu.getEmail());
            jProgressBar.setValue(jProgressBar.getValue() + 1);
            jLabelstatus.setText("Processando usuário: " + usu.getEmail() + "");
            jLabelstatus1.setText("Experiencia acumulada: " + soma);
        }

        return soma;
    }

    public List<Usuarios> calculoExperienciaPorUsuario(BigDecimal exp) {
        List<Usuarios> usuariosProcessados = new ArrayList();
        BigDecimal soma = new BigDecimal(0);
        jProgressBar.setMaximum(usuarios.size());
        jProgressBar.setValue(0);
        jLabelEtapa.setText("Etapa calculo de experiencia do usuario: 3/3");
        for (Usuarios usu : usuarios) {

            this.setTitle(usu.getEmail());
            jProgressBar.setValue(jProgressBar.getValue() + 1);
            jLabelstatus.setText("Processando usuário: " + usu.getEmail() + "");
            soma = calcularExperiencia(usu.getContribuicao(), exp);
            jLabelstatus1.setText("Experiencia do usuário: " + soma);
            usu.setContribuicao(soma);
            usuariosProcessados.add(usu);
        }
        return usuariosProcessados;
    }

    public List retornoConsulta(List<Commit> commits) {

        List<Artefato> total = new ArrayList();
        try {

            FileRepositoryBuilder builder = new FileRepositoryBuilder();
            Repository repository = builder.setGitDir(new File("C:\\Users\\ehrick\\Documents\\GitHub\\core\\.git"))
                    .readEnvironment()
                    .findGitDir()
                    .build();

            jProgressBar.setIndeterminate(false);
            jProgressBar.setMaximum(commits.size());
            jProgressBar.setStringPainted(true);
            jProgressBar.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            for (Commit string : commits) {
                jLabelstatus.setText("COMMIT ID: " + string.getCommit());

                ObjectId revid = repository.resolve(string.getCommit());
                RevWalk revWalk = new RevWalk(repository);
                RevCommit commit = revWalk.parseCommit(revid);
                RevWalk rw = new RevWalk(repository);
                if (commit.getParentCount() > 0) {
                    RevCommit parent = rw.parseCommit(commit.getParent(0).getId());
                    DiffFormatter df = new DiffFormatter(DisabledOutputStream.INSTANCE);
                    df.setRepository(repository);
                    df.setDiffComparator(RawTextComparator.DEFAULT);
                    df.setDetectRenames(true);
                    List<DiffEntry> diffs = df.scan(parent.getTree(), commit.getTree());

                    for (DiffEntry diff : diffs) {
                        String[] split = diff.getNewPath().split("/");
                        if (split[0] != null && !"".equals(split[0]) && split[0].indexOf(".") == -1 && split.length > 1) {

                            jLabelstatus1.setText(diff.getNewPath());
                            total.add(new Artefato(diff.getNewPath(), ArtefatoMap.verificarComponenteDoArtefato(split[0]), string));

                        }
                    }
                }
                jProgressBar.setValue(jProgressBar.getValue() + 1);

            }
        } catch (IOException ex) {
            Logger.getLogger(JDialogImportantoArtefatos.class.getName()).log(Level.SEVERE, null, ex);
        }
        return total;
    }
}
