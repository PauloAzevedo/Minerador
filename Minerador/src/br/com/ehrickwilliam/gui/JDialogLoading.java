/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ehrickwilliam.gui;

import br.com.ehrickwilliam.bibliotecas.Util;
import br.com.ehrickwilliam.conexao.Data;
import br.com.ehrickwilliam.conexao.HibernateConfiguration;
import br.com.ehrickwilliam.daos.DaoComment;
import br.com.ehrickwilliam.daos.DaoIssues;
import br.com.ehrickwilliam.daos.DaoUsuario;
import br.com.ehrickwilliam.model.Comment;
import br.com.ehrickwilliam.model.Issue;
import br.com.ehrickwilliam.model.Usuario;
import br.com.ehrickwilliam.model.Usuarios;
import java.awt.Cursor;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;

/**
 *
 * @author Erick
 */
public class JDialogLoading extends javax.swing.JDialog {

    /**
     * Creates new form JDialogCadastroClienteFisico
     *
     * @param parent
     * @param modal
     */
    private List<Usuarios> usuarios;
    private final String dataInicial;
    private final String dataFinal;
    private final String componente;
    private final String modo;
    private final String local;

    public JDialogLoading(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jProgressBar.setStringPainted(true);
        jProgressBar.setIndeterminate(true);
        jProgressBar.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        jButtonExecutar.setVisible(false);
        
        local = Data.hash.get("local").toString();
        modo = Data.hash.get("modo").toString();
        dataInicial = Data.hash.get("dataInicial").toString();
        dataFinal = Data.hash.get("dataFinal").toString();
        componente = Data.hash.get("componente").toString();
        executar(jButtonExecutar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelstatus = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jButtonExecutar = new javax.swing.JButton();
        jLabelstatus1 = new javax.swing.JLabel();
        jLabelEtapa = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuParar = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(443, 185));
        setMinimumSize(new java.awt.Dimension(443, 185));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(443, 185));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelstatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelstatus.setText("Processo iniciado!");
        getContentPane().add(jLabelstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));
        getContentPane().add(jProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 380, 20));

        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonExecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, -1, -1));

        jLabelstatus1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelstatus1.setText("Por favor, aguarde...");
        getContentPane().add(jLabelstatus1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jLabelEtapa.setText("Etapa restantes: 3");
        getContentPane().add(jLabelEtapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        jMenuBar1.setMinimumSize(new java.awt.Dimension(56, 31));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(396, 31));

        jMenuParar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ehrickwilliam/icon/116.png"))); // NOI18N
        jMenuParar.setText("Parar");
        jMenuParar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuPararMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuParar);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        try {
            switch (local) {
                case "0":
                    retornoConsultaTotal();
                    break;
                case "1":
                    break;
            }

        } catch (SQLException ex) {
            Logger.getLogger(JDialogLoading.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jMenuPararMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuPararMouseClicked

    }//GEN-LAST:event_jMenuPararMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JLabel jLabelEtapa;
    private javax.swing.JLabel jLabelstatus;
    private javax.swing.JLabel jLabelstatus1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenu jMenuParar;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    public void retornoConsultaTotal() throws SQLException {
        jLabelEtapa.setText("Etapa processamento: 1/3");
        HibernateConfiguration.setBase("minerador");
        jProgressBar.setIndeterminate(false);
        List<Usuario> listarUsuarios = new DaoUsuario().listar("", "id");
        jProgressBar.setMaximum(listarUsuarios.size());
        List<Issue> listarIssue;
        List<Comment> listarComment = new ArrayList<>();
        if(!"".equals(componente) && componente != null && !"  /  /    ".equals(dataInicial)){
            
           listarIssue = new DaoIssues().obterPorComponente(componente);
           
            for (Issue issueLista : listarIssue) {
               List<Comment> obterPorIssue = new DaoComment().obterPorIssue(issueLista);
                for (Comment comment : obterPorIssue) {
                    listarComment.add(comment);
                }
            }
            
        }else{
           listarIssue = new DaoIssues().listar("", "id");
           listarComment = new DaoComment().listar("", "id");
        }

        usuarios = new ArrayList<>();

        for (Usuario usuario : listarUsuarios) {
            jLabelstatus.setText("Processando usuario: " + usuario.getConta().getEmail());
            double count = 0.0;

            for (Issue issue : listarIssue) {
                if (issue.getSubmittedBy().equals(usuario)) {
                    count = count + 1;
                }
            }

            for (Comment comment : listarComment) {
                if (comment.getCommitedBy().equals(usuario)) {
                    count = count + 1;
                }
            }

            usuarios.add(new Usuarios(null, usuario.getConta().getEmail(), count, ""));
            jProgressBar.setValue(jProgressBar.getValue() + 1);
        }

        Double calculoTotalExperiencia = calculoTotalExperiencia();
        List<Usuarios> calculoExperienciaPorUsuario = calculoExperienciaPorUsuario(calculoTotalExperiencia);
        Data.hash.put("usuarios", calculoExperienciaPorUsuario);
     
        this.dispose();
        Util.abrirDialogCentralizado(new JDialogResultado(null, rootPaneCheckingEnabled));

    }

    public static void executar(final JButton botao) {
        new Thread() {
            @Override
            public void run() {
                int flag = 0;
                while (flag == 0) {
                    try {
                        botao.doClick();
                        flag = +1;

                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            }
        }.start();

    }

    public Double calcularExperiencia(Double divisor, Double total) {
        return divisor / total;
    }

    public Double calculoTotalExperiencia() {

        Double soma = 0.0;
        jProgressBar.setMaximum(usuarios.size());
        jProgressBar.setValue(0);
        jLabelEtapa.setText("Etapa calculo de experiencia: 2/3");
        for (Usuarios usu : usuarios) {
            soma = soma + usu.getContribuicao();
            this.setTitle(usu.getEmail());
            jProgressBar.setValue(jProgressBar.getValue() + 1);
            jLabelstatus.setText("Processando usu√°rio: " + usu.getEmail() + "");
            jLabelstatus1.setText("Experiencia acumulada: " + soma);
        }
        return soma;
    }

    public List<Usuarios> calculoExperienciaPorUsuario(double exp) {
        List<Usuarios> usuariosProcessados = new ArrayList();
        Double soma = 0.0;
        jProgressBar.setMaximum(usuarios.size());
        jProgressBar.setValue(0);
        jLabelEtapa.setText("Etapa calculo de experiencia do usuario: 3/3");
        for (Usuarios usu : usuarios) {

            this.setTitle(usu.getEmail());
            jProgressBar.setValue(jProgressBar.getValue() + 1);
            jLabelstatus.setText("Processando usu√°rio: " + usu.getEmail() + "");
            soma = calcularExperiencia(usu.getContribuicao(), exp);
            jLabelstatus1.setText("Experiencia do usu√°rio: " + soma);
            usu.setContribuicao(soma);
            usuariosProcessados.add(usu);
        }
        return usuariosProcessados;
    }

}
